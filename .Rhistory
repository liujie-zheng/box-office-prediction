percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction) / final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
mod2 = lm(Days_29~Days_13,data=final_movie_2)
prediction <- predict(mod1,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction) / final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
mod2 = lm(Days_29~Days_13,data=final_movie_2)
prediction <- predict(mod2,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction) / final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
mod2 = lm(Days_29~Days_13,data=final_movie_2)
prediction <- predict(mod2,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction) / final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
# 29 is "The Marvels", exclude it in model fitting
mod1 = lm(Days_29~Days_13+Rotten.Tomato,data=final_movie_2)
prediction <- predict(mod1,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
mod2 = lm(Days_29~Days_13,data=final_movie_2)
prediction <- predict(mod2,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
# 29 is "The Marvels", exclude it in model fitting
mod1 = lm(Days_29~Days_13+Rotten.Tomato,data=final_movie_2)
prediction1 <- predict(mod1,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction1))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction1) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
mod2 = lm(Days_29~Days_13,data=final_movie_2)
prediction2 <- predict(mod2,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction2))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction2) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
mod2 = lm(Days_29~Days_13,data=final_movie_2)
prediction2 <- predict(mod2,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction2))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction2) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
# 29 is "The Marvels", exclude it in model fitting
mod1 = lm(Days_29~Days_13+Rotten.Tomato,data=final_movie_2)
prediction1 <- predict(mod1,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction1))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction1) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
final_movie[29,3] = 64945395
predict(mod1,newdata=final_movie[29,])
final_movie_2[29,3] = 64945395
predict(mod1,newdata=final_movie_2[29,])
final_movie_2[29,3] = 64945395
predict(mod1,newdata=final_movie_2)[29]
final_movie_2[29,3] = 64945395
predict(mod1,newdata=final_movie_2)[29]
final_movie_2[29,3] = 64945395
predict(mod1,newdata=final_movie_2)
final_movie_2[29,3] = 64945395
print(final_movie_2)
predict(mod1,newdata=final_movie_2)
final_movie_2[13,3] = 64945395
print(final_movie_2)
predict(mod1,newdata=final_movie_2)
final_movie_2[29,4] = 64945395
print(final_movie_2)
predict(mod1,newdata=final_movie_2)
# 29 is "The Marvels", exclude it in model fitting
mod1 = lm(Days_29~Days_13+Rotten.Tomato,data=final_movie_2)
prediction1 <- predict(mod1,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction1))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction1) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
mod2 = lm(Days_29~Days_13,data=final_movie_2)
prediction2 <- predict(mod2,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction2))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction2) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(leaps)
library(dplyr)
library(mosaic)
library(ggplot2)
metadata = read.csv("metadata.csv")
dim(metadata)
str(metadata)
ant_man = read.csv("data_raw/Ant-Man and the Wasp.csv")
dim(ant_man)
str(ant_man)
the_marvels = read.csv("data_raw/The Marvels.csv")
dim(the_marvels)
str(the_marvels)
ant_man_cleaned = read.csv("data_cleaned/Ant-Man and the Wasp_cleaned.csv")
str(ant_man_cleaned)
the_marvels_cleaned = read.csv("data_cleaned/The Marvels_cleaned.csv")
str(the_marvels_cleaned)
all_files <- list.files(path = "data_cleaned", pattern = "\\.csv$", full.names = TRUE)
list_of_movies <- lapply(all_files, readr::read_csv)
names(list_of_movies) <- gsub("\\_cleaned.csv$", "", all_files)
list_of_movies_40 <- lapply(list_of_movies, function(df) {
head(df, 40)
})
list_of_movies_40 <- lapply(list_of_movies_40, function(df) {
df$Day <- as.numeric(df$Day)
return(df)
})
combined_df <- bind_rows(list_of_movies_40, .id = "DataFrameID")
ggplot(combined_df, aes(x = Day, y = `Daily`, group = DataFrameID, color = DataFrameID)) +
geom_line() +
geom_vline(xintercept = 29, color = "red", size = 0.5) +
theme_minimal() +
theme(text = element_text(size = 4)) +
labs(title = "Daily Box Office Revenue vs Days Released", x = "Day", y = "Revenue")
ggplot(combined_df, aes(x = Day, y = `To Date`, group = DataFrameID, color = DataFrameID)) +
geom_line() +
geom_vline(xintercept = 29, color = "red", size = 0.5) +
theme_minimal() +
theme(text = element_text(size = 4)) +
labs(title = "Cumulative Box Office Revenue vs Days Released", x = "Day", y = "Revenue")
# Get all file names of individual marvel movies csv from the folder
file <- list.files(path = "data_cleaned", pattern = "\\.csv$", full.names = TRUE)
file_names <- basename(file)
# helper function to extract cumulative box office revenue at a certain day
extract_data <- function(file, day) {
data <- read.csv(file)
if (ncol(data) >= 10 && nrow(data) >= 10) {
return(data[day, 10])
}
}
day29 <- lapply(all_files, extract_data, 29)
movie_titles <- gsub("_cleaned\\.csv", "", file_names)
metadata <- arrange(metadata, Movie)
final_data <- data.frame(Movie = movie_titles, Days_29 = unlist(day29))
final_data <- arrange(final_data, Movie)
final_data$Movie = metadata$Movie
day13 <- lapply(file, extract_data, 13)
total <- data.frame(Movie = movie_titles, Days_13 = unlist(day13))
total <- arrange(total,Movie)
total$Movie <- metadata$Movie
final_data <- merge(final_data,total, by = "Movie", all = T)
final_movie <- final_data[-29,]
str(final_movie)
cor(x=final_movie$Days_13, y=final_movie$Days_29, use='complete.obs')
# extact and convert the Rotten Tomato scores to numeric values
rotten_tomato <- read.csv("metadata.csv")[-c(2,4)]
rotten_tomato$Rotten.Tomato <- as.numeric(gsub("^(\\d+).*", "\\1", rotten_tomato$Rotten.Tomato))
final_movie_2 <- merge(rotten_tomato, final_movie, by = "Movie", all = TRUE)
str(final_movie_2)
ggplot(final_movie_2, aes(x = Rotten.Tomato, y = Days_29)) +
geom_point() +
theme_minimal() +
labs(title = "Rotten Tomato vs Renenue at Day 29", x = "Rotten Tomato", y = "Renenue at Day 29")
cor(x=final_movie_2$Rotten.Tomato, y=final_movie_2$Days_29, use='complete.obs')
# 29 is "The Marvels", exclude it in model fitting
mod1 = lm(Days_29~Days_13+Rotten.Tomato,data=final_movie_2)
prediction1 <- predict(mod1,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction1))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction1) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
mod2 = lm(Days_29~Days_13,data=final_movie_2)
prediction2 <- predict(mod2,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction2))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction2) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
final_movie_2[29,4] = 64945395
print(final_movie_2)
predict(mod1,newdata=final_movie_2)
final_movie_2[29,4] = 64945395
print(final_movie_2)
predict(mod1,newdata=final_movie_2)[29]
final_movie_2[29,4] = 64945395
print(final_movie_2)
predict(mod1,newdata=final_movie_2[29,])
final_movie_2[29,4] = 64945395
predict(mod1,newdata=final_movie_2[29,])
final_movie_2[29,4] = 64945395
predict(mod2,newdata=final_movie_2[29,])
final_movie_2[29,4] = 64945395
predict(mod1,newdata=final_movie_2[29,])
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(leaps)
library(dplyr)
library(mosaic)
library(ggplot2)
metadata = read.csv("metadata.csv")
dim(metadata)
str(metadata)
ant_man = read.csv("data_raw/Ant-Man and the Wasp.csv")
dim(ant_man)
str(ant_man)
the_marvels = read.csv("data_raw/The Marvels.csv")
dim(the_marvels)
str(the_marvels)
ant_man_cleaned = read.csv("data_cleaned/Ant-Man and the Wasp_cleaned.csv")
str(ant_man_cleaned)
the_marvels_cleaned = read.csv("data_cleaned/The Marvels_cleaned.csv")
str(the_marvels_cleaned)
all_files <- list.files(path = "data_cleaned", pattern = "\\.csv$", full.names = TRUE)
list_of_movies <- lapply(all_files, readr::read_csv)
names(list_of_movies) <- gsub("\\_cleaned.csv$", "", all_files)
list_of_movies_40 <- lapply(list_of_movies, function(df) {
head(df, 40)
})
list_of_movies_40 <- lapply(list_of_movies_40, function(df) {
df$Day <- as.numeric(df$Day)
return(df)
})
combined_df <- bind_rows(list_of_movies_40, .id = "DataFrameID")
ggplot(combined_df, aes(x = Day, y = `Daily`, group = DataFrameID, color = DataFrameID)) +
geom_line() +
geom_vline(xintercept = 29, color = "red", size = 0.5) +
theme_minimal() +
theme(text = element_text(size = 4)) +
labs(title = "Daily Box Office Revenue vs Days Released", x = "Day", y = "Revenue")
ggplot(combined_df, aes(x = Day, y = `To Date`, group = DataFrameID, color = DataFrameID)) +
geom_line() +
geom_vline(xintercept = 29, color = "red", size = 0.5) +
theme_minimal() +
theme(text = element_text(size = 4)) +
labs(title = "Cumulative Box Office Revenue vs Days Released", x = "Day", y = "Revenue")
# Get all file names of individual marvel movies csv from the folder
file <- list.files(path = "data_cleaned", pattern = "\\.csv$", full.names = TRUE)
file_names <- basename(file)
# helper function to extract cumulative box office revenue at a certain day
extract_data <- function(file, day) {
data <- read.csv(file)
if (ncol(data) >= 10 && nrow(data) >= 10) {
return(data[day, 10])
}
}
day29 <- lapply(all_files, extract_data, 29)
movie_titles <- gsub("_cleaned\\.csv", "", file_names)
metadata <- arrange(metadata, Movie)
final_data <- data.frame(Movie = movie_titles, Days_29 = unlist(day29))
final_data <- arrange(final_data, Movie)
final_data$Movie = metadata$Movie
day13 <- lapply(file, extract_data, 13)
total <- data.frame(Movie = movie_titles, Days_13 = unlist(day13))
total <- arrange(total,Movie)
total$Movie <- metadata$Movie
final_data <- merge(final_data,total, by = "Movie", all = T)
final_movie <- final_data[-29,]
str(final_movie)
cor(x=final_movie$Days_13, y=final_movie$Days_29, use='complete.obs')
# extact and convert the Rotten Tomato scores to numeric values
rotten_tomato <- read.csv("metadata.csv")[-c(2,4)]
rotten_tomato$Rotten.Tomato <- as.numeric(gsub("^(\\d+).*", "\\1", rotten_tomato$Rotten.Tomato))
final_movie_2 <- merge(rotten_tomato, final_movie, by = "Movie", all = TRUE)
str(final_movie_2)
ggplot(final_movie_2, aes(x = Rotten.Tomato, y = Days_29)) +
geom_point() +
theme_minimal() +
labs(title = "Rotten Tomato vs Renenue at Day 29", x = "Rotten Tomato", y = "Renenue at Day 29")
cor(x=final_movie_2$Rotten.Tomato, y=final_movie_2$Days_29, use='complete.obs')
# 29 is "The Marvels", exclude it in model fitting
mod1 = lm(Days_29~Days_13+Rotten.Tomato,data=final_movie_2)
prediction1 <- predict(mod1,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction1))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction1) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
mod2 = lm(Days_29~Days_13,data=final_movie_2)
prediction2 <- predict(mod2,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction2))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction2) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
final_movie_2[29,4] = 64945395
predict(mod1,newdata=final_movie_2[29,])
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(leaps)
library(dplyr)
library(mosaic)
library(ggplot2)
metadata = read.csv("metadata.csv")
dim(metadata)
str(metadata)
ant_man = read.csv("data_raw/Ant-Man and the Wasp.csv")
dim(ant_man)
str(ant_man)
the_marvels = read.csv("data_raw/The Marvels.csv")
dim(the_marvels)
str(the_marvels)
ant_man_cleaned = read.csv("data_cleaned/Ant-Man and the Wasp_cleaned.csv")
str(ant_man_cleaned)
the_marvels_cleaned = read.csv("data_cleaned/The Marvels_cleaned.csv")
str(the_marvels_cleaned)
all_files <- list.files(path = "data_cleaned", pattern = "\\.csv$", full.names = TRUE)
list_of_movies <- lapply(all_files, readr::read_csv)
names(list_of_movies) <- gsub("\\_cleaned.csv$", "", all_files)
list_of_movies_40 <- lapply(list_of_movies, function(df) {
head(df, 40)
})
list_of_movies_40 <- lapply(list_of_movies_40, function(df) {
df$Day <- as.numeric(df$Day)
return(df)
})
combined_df <- bind_rows(list_of_movies_40, .id = "DataFrameID")
ggplot(combined_df, aes(x = Day, y = `Daily`, group = DataFrameID, color = DataFrameID)) +
geom_line() +
geom_vline(xintercept = 29, color = "red", size = 0.5) +
theme_minimal() +
theme(text = element_text(size = 4)) +
labs(title = "Daily Box Office Revenue vs Days Released", x = "Day", y = "Revenue")
ggplot(combined_df, aes(x = Day, y = `To Date`, group = DataFrameID, color = DataFrameID)) +
geom_line() +
geom_vline(xintercept = 29, color = "red", size = 0.5) +
theme_minimal() +
theme(text = element_text(size = 4)) +
labs(title = "Cumulative Box Office Revenue vs Days Released", x = "Day", y = "Revenue")
# Get all file names of individual marvel movies csv from the folder
file <- list.files(path = "data_cleaned", pattern = "\\.csv$", full.names = TRUE)
file_names <- basename(file)
# helper function to extract cumulative box office revenue at a certain day
extract_data <- function(file, day) {
data <- read.csv(file)
if (ncol(data) >= 10 && nrow(data) >= 10) {
return(data[day, 10])
}
}
day29 <- lapply(all_files, extract_data, 29)
movie_titles <- gsub("_cleaned\\.csv", "", file_names)
metadata <- arrange(metadata, Movie)
final_data <- data.frame(Movie = movie_titles, Days_29 = unlist(day29))
final_data <- arrange(final_data, Movie)
final_data$Movie = metadata$Movie
day13 <- lapply(file, extract_data, 13)
total <- data.frame(Movie = movie_titles, Days_13 = unlist(day13))
total <- arrange(total,Movie)
total$Movie <- metadata$Movie
final_data <- merge(final_data,total, by = "Movie", all = T)
final_movie <- final_data[-29,]
str(final_movie)
cor(x=final_movie$Days_13, y=final_movie$Days_29, use='complete.obs')
# extact and convert the Rotten Tomato scores to numeric values
rotten_tomato <- read.csv("metadata.csv")[-c(2,4)]
rotten_tomato$Rotten.Tomato <- as.numeric(gsub("^(\\d+).*", "\\1", rotten_tomato$Rotten.Tomato))
final_movie_2 <- merge(rotten_tomato, final_movie, by = "Movie", all = TRUE)
str(final_movie_2)
ggplot(final_movie_2, aes(x = Rotten.Tomato, y = Days_29)) +
geom_point() +
theme_minimal() +
labs(title = "Rotten Tomato vs Renenue at Day 29", x = "Rotten Tomato", y = "Renenue at Day 29")
cor(x=final_movie_2$Rotten.Tomato, y=final_movie_2$Days_29, use='complete.obs')
# 29 is "The Marvels", exclude it in model fitting
mod1 = lm(Days_29~Days_13+Rotten.Tomato,data=final_movie_2)
prediction1 <- predict(mod1,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction1))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction1) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
mod2 = lm(Days_29~Days_13,data=final_movie_2)
prediction2 <- predict(mod2,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction2))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction2) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
final_movie_2[29,4] = 64945395
predict(mod1,newdata=final_movie_2[29,])
library(rmarkdown)
library(tinytex)
library(knitr)
library(readr)
library(leaps)
library(dplyr)
library(mosaic)
library(ggplot2)
metadata = read.csv("metadata.csv")
dim(metadata)
str(metadata)
ant_man = read.csv("data_raw/Ant-Man and the Wasp.csv")
dim(ant_man)
str(ant_man)
the_marvels = read.csv("data_raw/The Marvels.csv")
dim(the_marvels)
str(the_marvels)
ant_man_cleaned = read.csv("data_cleaned/Ant-Man and the Wasp_cleaned.csv")
str(ant_man_cleaned)
the_marvels_cleaned = read.csv("data_cleaned/The Marvels_cleaned.csv")
str(the_marvels_cleaned)
all_files <- list.files(path = "data_cleaned", pattern = "\\.csv$", full.names = TRUE)
list_of_movies <- lapply(all_files, readr::read_csv)
names(list_of_movies) <- gsub("\\_cleaned.csv$", "", all_files)
list_of_movies_40 <- lapply(list_of_movies, function(df) {
head(df, 40)
})
list_of_movies_40 <- lapply(list_of_movies_40, function(df) {
df$Day <- as.numeric(df$Day)
return(df)
})
combined_df <- bind_rows(list_of_movies_40, .id = "DataFrameID")
ggplot(combined_df, aes(x = Day, y = `Daily`, group = DataFrameID, color = DataFrameID)) +
geom_line() +
geom_vline(xintercept = 29, color = "red", size = 0.5) +
theme_minimal() +
theme(text = element_text(size = 4)) +
labs(title = "Daily Box Office Revenue vs Days Released", x = "Day", y = "Revenue")
ggplot(combined_df, aes(x = Day, y = `To Date`, group = DataFrameID, color = DataFrameID)) +
geom_line() +
geom_vline(xintercept = 29, color = "red", size = 0.5) +
theme_minimal() +
theme(text = element_text(size = 4)) +
labs(title = "Cumulative Box Office Revenue vs Days Released", x = "Day", y = "Revenue")
# Get all file names of individual marvel movies csv from the folder
file <- list.files(path = "data_cleaned", pattern = "\\.csv$", full.names = TRUE)
file_names <- basename(file)
# helper function to extract cumulative box office revenue at a certain day
extract_data <- function(file, day) {
data <- read.csv(file)
if (ncol(data) >= 10 && nrow(data) >= 10) {
return(data[day, 10])
}
}
day29 <- lapply(all_files, extract_data, 29)
movie_titles <- gsub("_cleaned\\.csv", "", file_names)
metadata <- arrange(metadata, Movie)
final_data <- data.frame(Movie = movie_titles, Days_29 = unlist(day29))
final_data <- arrange(final_data, Movie)
final_data$Movie = metadata$Movie
day13 <- lapply(file, extract_data, 13)
total <- data.frame(Movie = movie_titles, Days_13 = unlist(day13))
total <- arrange(total,Movie)
total$Movie <- metadata$Movie
final_data <- merge(final_data,total, by = "Movie", all = T)
final_movie <- final_data[-29,]
str(final_movie)
cor(x=final_movie$Days_13, y=final_movie$Days_29, use='complete.obs')
# extact and convert the Rotten Tomato scores to numeric values
rotten_tomato <- read.csv("metadata.csv")[-c(2,4)]
rotten_tomato$Rotten.Tomato <- as.numeric(gsub("^(\\d+).*", "\\1", rotten_tomato$Rotten.Tomato))
final_movie_2 <- merge(rotten_tomato, final_movie, by = "Movie", all = TRUE)
str(final_movie_2)
ggplot(final_movie_2, aes(x = Rotten.Tomato, y = Days_29)) +
geom_point() +
theme_minimal() +
labs(title = "Rotten Tomato vs Renenue at Day 29", x = "Rotten Tomato", y = "Renenue at Day 29")
cor(x=final_movie_2$Rotten.Tomato, y=final_movie_2$Days_29, use='complete.obs')
# 29 is "The Marvels", exclude it in model fitting
mod1 = lm(Days_29~Days_13+Rotten.Tomato,data=final_movie_2)
prediction1 <- predict(mod1,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction1))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction1) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
mod2 = lm(Days_29~Days_13,data=final_movie_2)
prediction2 <- predict(mod2,newdata=final_movie_2)[-29]
mae <- mean(abs(final_movie_2$Days_29[-29] - prediction2))
print(mae)
percentage_errors <- abs((final_movie_2$Days_29[-29] - prediction2) /
final_movie_2$Days_29[-29])
mape <- mean(percentage_errors)
print(mape)
final_movie_2[29,4] = 64945395
predict(mod1,newdata=final_movie_2[29,])
